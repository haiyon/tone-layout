// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.5
// source: api/interface/v1/post.proto

package iV1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "sample/api/schema/v1"
	v11 "sample/api/shared/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPostCreatePost = "/sample.v1.Post/CreatePost"
const OperationPostDeletePost = "/sample.v1.Post/DeletePost"
const OperationPostGetPost = "/sample.v1.Post/GetPost"
const OperationPostListPosts = "/sample.v1.Post/ListPosts"
const OperationPostUpdatePost = "/sample.v1.Post/UpdatePost"

type PostHTTPServer interface {
	CreatePost(context.Context, *v1.PostRequest) (*v1.PostReply, error)
	DeletePost(context.Context, *v1.GetPostRequest) (*v11.Response, error)
	GetPost(context.Context, *v1.GetPostRequest) (*v1.PostReply, error)
	ListPosts(context.Context, *v1.ListPostsRequest) (*v1.ListPostsReply, error)
	UpdatePost(context.Context, *v1.PostRequest) (*v1.PostReply, error)
}

func RegisterPostHTTPServer(s *http.Server, srv PostHTTPServer) {
	r := s.Route("/")
	r.POST("/posts", _Post_CreatePost0_HTTP_Handler(srv))
	r.GET("/posts/{post}", _Post_GetPost0_HTTP_Handler(srv))
	r.PUT("/posts", _Post_UpdatePost0_HTTP_Handler(srv))
	r.DELETE("/posts/{post}", _Post_DeletePost0_HTTP_Handler(srv))
	r.GET("/posts", _Post_ListPosts0_HTTP_Handler(srv))
}

func _Post_CreatePost0_HTTP_Handler(srv PostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostCreatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*v1.PostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.PostReply)
		return ctx.Result(200, reply)
	}
}

func _Post_GetPost0_HTTP_Handler(srv PostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetPostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostGetPost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPost(ctx, req.(*v1.GetPostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.PostReply)
		return ctx.Result(200, reply)
	}
}

func _Post_UpdatePost0_HTTP_Handler(srv PostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostUpdatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePost(ctx, req.(*v1.PostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.PostReply)
		return ctx.Result(200, reply)
	}
}

func _Post_DeletePost0_HTTP_Handler(srv PostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetPostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostDeletePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePost(ctx, req.(*v1.GetPostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.Response)
		return ctx.Result(200, reply)
	}
}

func _Post_ListPosts0_HTTP_Handler(srv PostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListPostsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostListPosts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPosts(ctx, req.(*v1.ListPostsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListPostsReply)
		return ctx.Result(200, reply)
	}
}

type PostHTTPClient interface {
	CreatePost(ctx context.Context, req *v1.PostRequest, opts ...http.CallOption) (rsp *v1.PostReply, err error)
	DeletePost(ctx context.Context, req *v1.GetPostRequest, opts ...http.CallOption) (rsp *v11.Response, err error)
	GetPost(ctx context.Context, req *v1.GetPostRequest, opts ...http.CallOption) (rsp *v1.PostReply, err error)
	ListPosts(ctx context.Context, req *v1.ListPostsRequest, opts ...http.CallOption) (rsp *v1.ListPostsReply, err error)
	UpdatePost(ctx context.Context, req *v1.PostRequest, opts ...http.CallOption) (rsp *v1.PostReply, err error)
}

type PostHTTPClientImpl struct {
	cc *http.Client
}

func NewPostHTTPClient(client *http.Client) PostHTTPClient {
	return &PostHTTPClientImpl{client}
}

func (c *PostHTTPClientImpl) CreatePost(ctx context.Context, in *v1.PostRequest, opts ...http.CallOption) (*v1.PostReply, error) {
	var out v1.PostReply
	pattern := "/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPostCreatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PostHTTPClientImpl) DeletePost(ctx context.Context, in *v1.GetPostRequest, opts ...http.CallOption) (*v11.Response, error) {
	var out v11.Response
	pattern := "/posts/{post}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostDeletePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PostHTTPClientImpl) GetPost(ctx context.Context, in *v1.GetPostRequest, opts ...http.CallOption) (*v1.PostReply, error) {
	var out v1.PostReply
	pattern := "/posts/{post}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostGetPost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PostHTTPClientImpl) ListPosts(ctx context.Context, in *v1.ListPostsRequest, opts ...http.CallOption) (*v1.ListPostsReply, error) {
	var out v1.ListPostsReply
	pattern := "/posts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostListPosts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PostHTTPClientImpl) UpdatePost(ctx context.Context, in *v1.PostRequest, opts ...http.CallOption) (*v1.PostReply, error) {
	var out v1.PostReply
	pattern := "/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPostUpdatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
