// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/interface/v1/greeter.proto

package iV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "sample/api/schema/v1"
	v11 "sample/api/shared/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_CreateGreeter_FullMethodName = "/sample.v1.greeter/CreateGreeter"
	Greeter_GetGreeter_FullMethodName    = "/sample.v1.greeter/GetGreeter"
	Greeter_UpdateGreeter_FullMethodName = "/sample.v1.greeter/UpdateGreeter"
	Greeter_DeleteGreeter_FullMethodName = "/sample.v1.greeter/DeleteGreeter"
	Greeter_ListGreeters_FullMethodName  = "/sample.v1.greeter/ListGreeters"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	CreateGreeter(ctx context.Context, in *v1.GreeterRequest, opts ...grpc.CallOption) (*v1.GreeterReply, error)
	GetGreeter(ctx context.Context, in *v1.GetGreeterRequest, opts ...grpc.CallOption) (*v1.GreeterReply, error)
	UpdateGreeter(ctx context.Context, in *v1.GreeterRequest, opts ...grpc.CallOption) (*v1.GreeterReply, error)
	DeleteGreeter(ctx context.Context, in *v1.GetGreeterRequest, opts ...grpc.CallOption) (*v11.Response, error)
	ListGreeters(ctx context.Context, in *v1.ListGreetersRequest, opts ...grpc.CallOption) (*v1.ListGreetersReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) CreateGreeter(ctx context.Context, in *v1.GreeterRequest, opts ...grpc.CallOption) (*v1.GreeterReply, error) {
	out := new(v1.GreeterReply)
	err := c.cc.Invoke(ctx, Greeter_CreateGreeter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetGreeter(ctx context.Context, in *v1.GetGreeterRequest, opts ...grpc.CallOption) (*v1.GreeterReply, error) {
	out := new(v1.GreeterReply)
	err := c.cc.Invoke(ctx, Greeter_GetGreeter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UpdateGreeter(ctx context.Context, in *v1.GreeterRequest, opts ...grpc.CallOption) (*v1.GreeterReply, error) {
	out := new(v1.GreeterReply)
	err := c.cc.Invoke(ctx, Greeter_UpdateGreeter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DeleteGreeter(ctx context.Context, in *v1.GetGreeterRequest, opts ...grpc.CallOption) (*v11.Response, error) {
	out := new(v11.Response)
	err := c.cc.Invoke(ctx, Greeter_DeleteGreeter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ListGreeters(ctx context.Context, in *v1.ListGreetersRequest, opts ...grpc.CallOption) (*v1.ListGreetersReply, error) {
	out := new(v1.ListGreetersReply)
	err := c.cc.Invoke(ctx, Greeter_ListGreeters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	CreateGreeter(context.Context, *v1.GreeterRequest) (*v1.GreeterReply, error)
	GetGreeter(context.Context, *v1.GetGreeterRequest) (*v1.GreeterReply, error)
	UpdateGreeter(context.Context, *v1.GreeterRequest) (*v1.GreeterReply, error)
	DeleteGreeter(context.Context, *v1.GetGreeterRequest) (*v11.Response, error)
	ListGreeters(context.Context, *v1.ListGreetersRequest) (*v1.ListGreetersReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) CreateGreeter(context.Context, *v1.GreeterRequest) (*v1.GreeterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGreeter not implemented")
}
func (UnimplementedGreeterServer) GetGreeter(context.Context, *v1.GetGreeterRequest) (*v1.GreeterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreeter not implemented")
}
func (UnimplementedGreeterServer) UpdateGreeter(context.Context, *v1.GreeterRequest) (*v1.GreeterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGreeter not implemented")
}
func (UnimplementedGreeterServer) DeleteGreeter(context.Context, *v1.GetGreeterRequest) (*v11.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGreeter not implemented")
}
func (UnimplementedGreeterServer) ListGreeters(context.Context, *v1.ListGreetersRequest) (*v1.ListGreetersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGreeters not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_CreateGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).CreateGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_CreateGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).CreateGreeter(ctx, req.(*v1.GreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetGreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_GetGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetGreeter(ctx, req.(*v1.GetGreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UpdateGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UpdateGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_UpdateGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UpdateGreeter(ctx, req.(*v1.GreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DeleteGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetGreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DeleteGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DeleteGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DeleteGreeter(ctx, req.(*v1.GetGreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ListGreeters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListGreetersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ListGreeters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_ListGreeters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ListGreeters(ctx, req.(*v1.ListGreetersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.v1.greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGreeter",
			Handler:    _Greeter_CreateGreeter_Handler,
		},
		{
			MethodName: "GetGreeter",
			Handler:    _Greeter_GetGreeter_Handler,
		},
		{
			MethodName: "UpdateGreeter",
			Handler:    _Greeter_UpdateGreeter_Handler,
		},
		{
			MethodName: "DeleteGreeter",
			Handler:    _Greeter_DeleteGreeter_Handler,
		},
		{
			MethodName: "ListGreeters",
			Handler:    _Greeter_ListGreeters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interface/v1/greeter.proto",
}
