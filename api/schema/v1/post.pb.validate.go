// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/schema/v1/post.proto

package mV1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PostRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostRequestMultiError, or
// nil if none found.
func (m *PostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return PostRequestMultiError(errors)
	}

	return nil
}

// PostRequestMultiError is an error wrapping multiple validation errors
// returned by PostRequest.ValidateAll() if the designated constraints aren't met.
type PostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostRequestMultiError) AllErrors() []error { return m }

// PostRequestValidationError is the validation error returned by
// PostRequest.Validate if the designated constraints aren't met.
type PostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostRequestValidationError) ErrorName() string { return "PostRequestValidationError" }

// Error satisfies the builtin error interface
func (e PostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostRequestValidationError{}

// Validate checks the field values on PostReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostReplyMultiError, or nil
// if none found.
func (m *PostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return PostReplyMultiError(errors)
	}

	return nil
}

// PostReplyMultiError is an error wrapping multiple validation errors returned
// by PostReply.ValidateAll() if the designated constraints aren't met.
type PostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostReplyMultiError) AllErrors() []error { return m }

// PostReplyValidationError is the validation error returned by
// PostReply.Validate if the designated constraints aren't met.
type PostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostReplyValidationError) ErrorName() string { return "PostReplyValidationError" }

// Error satisfies the builtin error interface
func (e PostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostReplyValidationError{}

// Validate checks the field values on GetPostRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPostRequestMultiError,
// or nil if none found.
func (m *GetPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Post

	if len(errors) > 0 {
		return GetPostRequestMultiError(errors)
	}

	return nil
}

// GetPostRequestMultiError is an error wrapping multiple validation errors
// returned by GetPostRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostRequestMultiError) AllErrors() []error { return m }

// GetPostRequestValidationError is the validation error returned by
// GetPostRequest.Validate if the designated constraints aren't met.
type GetPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostRequestValidationError) ErrorName() string { return "GetPostRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostRequestValidationError{}

// Validate checks the field values on ListPostsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPostsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostsRequestMultiError, or nil if none found.
func (m *ListPostsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cursor

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListPostsRequestMultiError(errors)
	}

	return nil
}

// ListPostsRequestMultiError is an error wrapping multiple validation errors
// returned by ListPostsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPostsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostsRequestMultiError) AllErrors() []error { return m }

// ListPostsRequestValidationError is the validation error returned by
// ListPostsRequest.Validate if the designated constraints aren't met.
type ListPostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostsRequestValidationError) ErrorName() string { return "ListPostsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostsRequestValidationError{}

// Validate checks the field values on ListPostsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPostsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPostsReplyMultiError,
// or nil if none found.
func (m *ListPostsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostsReplyValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostsReplyValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostsReplyValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPostsReplyMultiError(errors)
	}

	return nil
}

// ListPostsReplyMultiError is an error wrapping multiple validation errors
// returned by ListPostsReply.ValidateAll() if the designated constraints
// aren't met.
type ListPostsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostsReplyMultiError) AllErrors() []error { return m }

// ListPostsReplyValidationError is the validation error returned by
// ListPostsReply.Validate if the designated constraints aren't met.
type ListPostsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostsReplyValidationError) ErrorName() string { return "ListPostsReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPostsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostsReplyValidationError{}
