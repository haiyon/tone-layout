// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/schema/v1/greeter.proto

package mV1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GreeterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GreeterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GreeterRequestMultiError,
// or nil if none found.
func (m *GreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if m.Extra != nil {

		if all {
			switch v := interface{}(m.GetExtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GreeterRequestValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GreeterRequestValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GreeterRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GreeterRequestMultiError(errors)
	}

	return nil
}

// GreeterRequestMultiError is an error wrapping multiple validation errors
// returned by GreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type GreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GreeterRequestMultiError) AllErrors() []error { return m }

// GreeterRequestValidationError is the validation error returned by
// GreeterRequest.Validate if the designated constraints aren't met.
type GreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GreeterRequestValidationError) ErrorName() string { return "GreeterRequestValidationError" }

// Error satisfies the builtin error interface
func (e GreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GreeterRequestValidationError{}

// Validate checks the field values on GreeterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GreeterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GreeterReplyMultiError, or
// nil if none found.
func (m *GreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if m.Extra != nil {

		if all {
			switch v := interface{}(m.GetExtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GreeterReplyValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GreeterReplyValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GreeterReplyValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GreeterReplyValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GreeterReplyValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GreeterReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GreeterReplyValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GreeterReplyValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GreeterReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GreeterReplyMultiError(errors)
	}

	return nil
}

// GreeterReplyMultiError is an error wrapping multiple validation errors
// returned by GreeterReply.ValidateAll() if the designated constraints aren't met.
type GreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GreeterReplyMultiError) AllErrors() []error { return m }

// GreeterReplyValidationError is the validation error returned by
// GreeterReply.Validate if the designated constraints aren't met.
type GreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GreeterReplyValidationError) ErrorName() string { return "GreeterReplyValidationError" }

// Error satisfies the builtin error interface
func (e GreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GreeterReplyValidationError{}

// Validate checks the field values on GetGreeterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreeterRequestMultiError, or nil if none found.
func (m *GetGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Greeter

	// no validation rules for User

	if len(errors) > 0 {
		return GetGreeterRequestMultiError(errors)
	}

	return nil
}

// GetGreeterRequestMultiError is an error wrapping multiple validation errors
// returned by GetGreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreeterRequestMultiError) AllErrors() []error { return m }

// GetGreeterRequestValidationError is the validation error returned by
// GetGreeterRequest.Validate if the designated constraints aren't met.
type GetGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreeterRequestValidationError) ErrorName() string {
	return "GetGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreeterRequestValidationError{}

// Validate checks the field values on ListGreetersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGreetersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreetersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreetersRequestMultiError, or nil if none found.
func (m *ListGreetersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreetersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cursor

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListGreetersRequestMultiError(errors)
	}

	return nil
}

// ListGreetersRequestMultiError is an error wrapping multiple validation
// errors returned by ListGreetersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGreetersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreetersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreetersRequestMultiError) AllErrors() []error { return m }

// ListGreetersRequestValidationError is the validation error returned by
// ListGreetersRequest.Validate if the designated constraints aren't met.
type ListGreetersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreetersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreetersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreetersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreetersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreetersRequestValidationError) ErrorName() string {
	return "ListGreetersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreetersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreetersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreetersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreetersRequestValidationError{}

// Validate checks the field values on ListGreetersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGreetersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreetersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreetersReplyMultiError, or nil if none found.
func (m *ListGreetersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreetersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreetersReplyValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreetersReplyValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreetersReplyValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListGreetersReplyMultiError(errors)
	}

	return nil
}

// ListGreetersReplyMultiError is an error wrapping multiple validation errors
// returned by ListGreetersReply.ValidateAll() if the designated constraints
// aren't met.
type ListGreetersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreetersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreetersReplyMultiError) AllErrors() []error { return m }

// ListGreetersReplyValidationError is the validation error returned by
// ListGreetersReply.Validate if the designated constraints aren't met.
type ListGreetersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreetersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreetersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreetersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreetersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreetersReplyValidationError) ErrorName() string {
	return "ListGreetersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreetersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreetersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreetersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreetersReplyValidationError{}
